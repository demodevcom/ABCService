<?php

namespace Mns\Service;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2015-04-29 at 12:59:02.
 */
class SupplierTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Supplier
     */
    protected $object;

    /**
     * połączenie z bazą
     * @var propelConnection
     */
    protected $_conn;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Supplier;
        $this->_conn = \Propel::getConnection();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers Mns\Service\Supplier::_abGetProductGabFeePrice
     * @expectedException Exception
     *
     * tego produktu nie będzie, więc oczekujemy
     * Exception: WebService response: product not found [product #3819 not found]
     *
     */
    public function test_abGetProductGabFeePrice()
    {

        $method = new \ReflectionMethod(
            '\Mns\Service\Supplier', '_abGetProductGabFeePrice'
        );

        $method->setAccessible(TRUE);

        $this->assertEquals(
            'cokolwiekItakNieMaProduktu', $method->invoke(new Supplier, 'EBHPD040001')
        );
    }


    /**
     * @covers Mns\Service\Supplier::_abGetProductGabFeePrice
     *
     * uwaga:   jeśli produkt 'HZTEKZS12129012' Zlew Teka LUX 1B 1D 86 Biały
     *          zostanie usunięty przez AB test nie przejdzie
     *          przydałoby się tu mockupować
     */
    public function test_abGetProductGabFeePrice2()
    {

        $method = new \ReflectionMethod(
            '\Mns\Service\Supplier', '_abGetProductGabFeePrice'
        );

        $expected = array();
        $expected[0] = 890;
        $expected[1] = 0;

        $method->setAccessible(TRUE);

        $this->assertEquals(
            $expected, $method->invoke(new Supplier, 'HZTEKZS12129012')
        );
    }


    /**
     * Generated from @assert (null) == 'Brak ID zamówienia'.
     *
     * @covers Mns\Service\Supplier::sendOrder_Ab
     * @group basicAB
     */
    public function testSendOrder_Ab()
    {
        $this->assertEquals(
            'Brak ID zamówienia', $this->object->sendOrder_Ab(null)
        );
    }

    /**
     * Generated from @assert (-1) == 'Brak zamówienia w bazie o takim ID'.
     *
     * @covers Mns\Service\Supplier::sendOrder_Ab
     */
    public function testSendOrder_Ab2()
    {
        $this->assertEquals(
            'Brak zamówienia w bazie o takim ID', $this->object->sendOrder_Ab(-1)
        );
    }

    /**
     * Generated from @assert (791043) == 'Brak przypisanego użytkownika do zamówienia'.
     *
     * @covers Mns\Service\Supplier::sendOrder_Ab
     */
    public function testSendOrder_Ab3()
    {
        $this->assertEquals(
            'Brak przypisanego użytkownika do zamówienia', $this->object->sendOrder_Ab(791043)
        );
    }

    /**
     * Generated from @assert (32510) == 'Brak adresu wysyłki'.
     *
     * @covers Mns\Service\Supplier::sendOrder_Ab
     */
    public function testSendOrder_Ab4()
    {
        $this->assertEquals(
            'Brak adresu wysyłki', $this->object->sendOrder_Ab(32510)
        );
    }


    /**
     * @covers Mns\Service\Supplier::sendOrder_Ab
     */
    public function testSendOrder_Ab5()
    {
        $this->assertEquals(
            'Brak produktów o statusie new w zleceniu', $this->object->sendOrder_Ab(1851366)
        );
    }

    /**
     * @covers Mns\Service\Supplier::sendOrder_Ab
     */
    public function testSendOrder_Ab6()
    {
        // przygotowanie zamówienia tak, żeby produkty w nim miały status 'new'
        $presql = "UPDATE `morele_dev`.`item` SET `item_state`=0 WHERE  `item_id`=3452234;";
        $stmt = $this->_conn->prepare($presql);
        $stmt->execute();

        $response = $this->object->sendOrder_Ab(1850517);
        $test = false;
        if (strpos($response, 'neworderid') > 0) {
            $test = true;
        }

        $this->assertEquals(
            true, $test
        );
    }

    /**
     * @covers Mns\Service\Supplier::_paramsSendOrderAb
     */
    public function test_paramsSendOrderAb()
    {
        $ticketId = '270125';
        $paymentTermId = 'DH-F-POB';
        $requireContact = 0;
        $comment = '';
        $order_id = '1850517';
        $codAmt = '369';

        $method = new \ReflectionMethod(
            '\Mns\Service\Supplier', '_paramsSendOrderAb'
        );

        $expected = array();
        $expected['client'] = '123456789';
        $expected['login'] = 'testowy';
        $expected['pass'] = 'testowe';
        $expected['req'] = 'placeorder';
        $expected['shipping_addr_ticket'] = '270125';
        $expected['invoice_addr_ticket'] = '270125';
        $expected['delivery_method'] = 2;
        $expected['payment_term'] = 'DH-F-POB';
        $expected['allow_addition'] = 0;
        $expected['require_contact'] = 0;
        $expected['comment'] = '';
        $expected['own_number'] = 1850517;
        $expected['concat_last_order'] = 0;
        $expected['cod_amt'] = 369; // to zależy od bieżącej ceny
        $expected['unichk'] = 0;
        $expected['test_order'] = 1;

        $method->setAccessible(TRUE);

        $this->assertEquals(
            $expected, $method->invoke(new Supplier,
            $ticketId,
            $paymentTermId,
            $requireContact,
            $comment,
            $order_id,
            $codAmt
        )
        );
    }

    /**
     * @covers Mns\Service\Supplier::removeAliasDuplicates_Action
     * @todo   Implement testRemoveAliasDuplicates_Action().
     */
    public function testRemoveAliasDuplicates_Action()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Mns\Service\Supplier::addInvoice_Yamo
     * @todo   Implement testAddInvoice_Yamo().
     */
    public function testAddInvoice_Yamo()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Mns\Service\Supplier::generatePriceList_Megabajt
     * @todo   Implement testGeneratePriceList_Megabajt().
     */
    public function testGeneratePriceList_Megabajt()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Mns\Service\Supplier::addInvoice_NTT
     * @todo   Implement testAddInvoice_NTT().
     */
    public function testAddInvoice_NTT()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Mns\Service\Supplier::generatePriceList_Vidis
     * @todo   Implement testGeneratePriceList_Vidis().
     */
    public function testGeneratePriceList_Vidis()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Mns\Service\Supplier::addInvoice_ASBIS
     * @todo   Implement testAddInvoice_ASBIS().
     */
    public function testAddInvoice_ASBIS()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Mns\Service\Supplier::sendOrder_ASBIS
     * @todo   Implement testSendOrder_ASBIS().
     */
    public function testSendOrder_ASBIS()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Mns\Service\Supplier::addInvoice_Tajmax
     * @todo   Implement testAddInvoice_Tajmax().
     */
    public function testAddInvoice_Tajmax()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Mns\Service\Supplier::addInvoice_Comes
     * @todo   Implement testAddInvoice_Comes().
     */
    public function testAddInvoice_Comes()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Mns\Service\Supplier::importInvoice_Alstor
     * @todo   Implement testImportInvoice_Alstor().
     */
    public function testImportInvoice_Alstor()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Mns\Service\Supplier::clearPriceListFolder
     * @todo   Implement testClearPriceListFolder().
     */
    public function testClearPriceListFolder()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Mns\Service\Supplier::savePriceList
     * @todo   Implement testSavePriceList().
     */
    public function testSavePriceList()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Mns\Service\Supplier::saveInvoice
     * @todo   Implement testSaveInvoice().
     */
    public function testSaveInvoice()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Mns\Service\Supplier::importInvoices
     * @todo   Implement testImportInvoices().
     */
    public function testImportInvoices()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Mns\Service\Supplier::sendOrder_Action
     * @todo   Implement testSendOrder_Action().
     */
    public function testSendOrder_Action()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Mns\Service\Supplier::sendOrder_Abcdata
     * @todo   Implement testSendOrder_Abcdata().
     */
    public function testSendOrder_Abcdata()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Mns\Service\Supplier::createSupplierQuantity
     * @todo   Implement testCreateSupplierQuantity().
     */
    public function testCreateSupplierQuantity()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Mns\Service\Supplier::getSupplierStartQuantity
     * @todo   Implement testGetSupplierStartQuantity().
     */
    public function testGetSupplierStartQuantity()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Mns\Service\Supplier::changeSupplierStartQuantity
     * @todo   Implement testChangeSupplierStartQuantity().
     */
    public function testChangeSupplierStartQuantity()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Mns\Service\Supplier::setSupplierStartQuantity
     * @todo   Implement testSetSupplierStartQuantity().
     */
    public function testSetSupplierStartQuantity()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Mns\Service\Supplier::isProductAvailable
     * @todo   Implement testIsProductAvailable().
     */
    public function testIsProductAvailable()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Mns\Service\Supplier::changeSupplierAvailableQuantity
     * @todo   Implement testChangeSupplierAvailableQuantity().
     */
    public function testChangeSupplierAvailableQuantity()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Mns\Service\Supplier::setSupplierAvailableQuantity
     * @todo   Implement testSetSupplierAvailableQuantity().
     */
    public function testSetSupplierAvailableQuantity()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Mns\Service\Supplier::getSupplierRealQuantity
     * @todo   Implement testGetSupplierRealQuantity().
     */
    public function testGetSupplierRealQuantity()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Mns\Service\Supplier::changeSupplierRealQuantity
     * @todo   Implement testChangeSupplierRealQuantity().
     */
    public function testChangeSupplierRealQuantity()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Mns\Service\Supplier::setSupplierRealQuantity
     * @todo   Implement testSetSupplierRealQuantity().
     */
    public function testSetSupplierRealQuantity()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Mns\Service\Supplier::setDirectOrderToGo
     * @todo   Implement testSetDirectOrderToGo().
     */
    public function testSetDirectOrderToGo()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Mns\Service\Supplier::isDirectOrderSetToGo
     * @todo   Implement testIsDirectOrderSetToGo().
     */
    public function testIsDirectOrderSetToGo()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

}
